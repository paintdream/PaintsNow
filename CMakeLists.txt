CMAKE_MINIMUM_REQUIRED (VERSION 2.8)
OPTION (CMAKE_WARN_VS6 "Allow compilation under Visual C++ 6.0" OFF)
OPTION (STATIC_VC_RUNTIME "Use static VC runtime" ON)

IF (NOT WIN32)
  	find_program(CLANG-TIDY-EXE "/usr/bin/clang-tidy")
ENDIF (NOT WIN32)

IF (EXISTS "${CLANG-TIDY-EXE}")
	# MESSAGE(STATUS "use clang-tidy to check")	
  	# SET (CMAKE_CXX_CLANG_TIDY "${CLANG-TIDY-EXE};--header-filter=.*;-checks=-*,modernize-use-override;modernize-pass-by-value;-p=${CMAKE_BUILD_DIR};-fix;-fix-errors")
ENDIF (EXISTS "${CLANG-TIDY-EXE}")

# ================================================================ #
PROJECT (PaintsNow)

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

# https://stackoverflow.com/questions/45092198/cmake-how-do-i-change-properties-on-subdirectory-project-targets
DEFINE_PROPERTY(
    TARGET
    PROPERTY FOLDER
    INHERITED
    BRIEF_DOCS "Set the folder name."
    FULL_DOCS  "Use to organize targets in an IDE."
)

FUNCTION (ADD_SUBDIRECTORY_WITH_FOLDER _folder_name _folder)
    ADD_SUBDIRECTORY(${_folder} ${ARGN})
    SET_PROPERTY(DIRECTORY "${_folder}" PROPERTY FOLDER "${_folder_name}")
ENDFUNCTION ()

IF (CMAKE_SYSTEM_PROCESSOR MATCHES "(x86)|(X86)|(amd64)|(AMD64)")
    SET (IS_X86_64 1)
ELSE (CMAKE_SYSTEM_PROCESSOR MATCHES "(x86)|(X86)|(amd64)|(AMD64)")
    SET (IS_X86_64 0)
ENDIF (CMAKE_SYSTEM_PROCESSOR MATCHES "(x86)|(X86)|(amd64)|(AMD64)")

MESSAGE (STATUS "IS x86/amd64: ${IS_X86_64} (${CMAKE_SYSTEM_PROCESSOR})" )

IF (MSVC)
	# Default to statically-linked runtime.
	IF (STATIC_VC_RUNTIME)
		SET (MSVC_RUNTIME "static")
	ELSE (STATIC_VC_RUNTIME)
		SET (MSVC_RUNTIME "dynamic")
	ENDIF (STATIC_VC_RUNTIME)
	# SET compiler options.
	SET (variables
		CMAKE_C_FLAGS_DEBUG
		CMAKE_C_FLAGS_MINSIZEREL
		CMAKE_C_FLAGS_RELEASE
		CMAKE_C_FLAGS_RELWITHDEBINFO
		CMAKE_CXX_FLAGS_DEBUG
		CMAKE_CXX_FLAGS_MINSIZEREL
		CMAKE_CXX_FLAGS_RELEASE
		CMAKE_CXX_FLAGS_RELWITHDEBINFO
	)

	ADD_DEFINITIONS (-D_HAS_EXCEPTIONS=0)
	IF (${MSVC_RUNTIME} STREQUAL "static")
		# disable RTTI & Exceptions
		SET (CMAKE_CXX_FLAGS, "/DWIN32 /D_WINDOWS /W3")
		MESSAGE (STATUS
			"MSVC -> forcing use of statically-linked runtime."
		)
		FOREACH (variable ${variables})
			IF (${variable} MATCHES "/MD")
				string(REGEX REPLACE "/MD" "/MT" ${variable} "${${variable}}")
			ENDIF ()
		ENDFOREACH ()
	ELSE ()
		MESSAGE(STATUS
			"MSVC -> forcing use of dynamically-linked runtime."
		)
		FOREACH (variable ${variables})
			IF (${variable} MATCHES "/MT")
				string(REGEX REPLACE "/MT" "/MD" ${variable} "${${variable}}")
			ENDIF ()
		ENDFOREACH ()
	ENDIF ()
ENDIF ()

SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DPAINTSNOW_RELEASE=1")

SET (variables
	CMAKE_C_FLAGS_DEBUG
	CMAKE_C_FLAGS_MINSIZEREL
	CMAKE_C_FLAGS_RELEASE
	CMAKE_C_FLAGS_RELWITHDEBINFO
	CMAKE_CXX_FLAGS_DEBUG
	CMAKE_CXX_FLAGS_MINSIZEREL
	CMAKE_CXX_FLAGS_RELEASE
	CMAKE_CXX_FLAGS_RELWITHDEBINFO
)
MESSAGE(STATUS "Initial build flags:")
FOREACH (variable ${variables})
	MESSAGE(STATUS " '${variable}': ${${variable}}")
ENDFOREACH ()
MESSAGE(STATUS "")

INCLUDE(CheckIncludeFiles)

SET (CMAKE_C_STANDARD 11)
SET (CMAKE_CXX_STANDARD 11)

ADD_DEFINITIONS (-D_7ZIP_ST)
ADD_DEFINITIONS (-DCMAKE_PAINTSNOW)

OPTION (USE_OPTICK "Enable Optick Profiler" ON)
IF (USE_OPTICK)
	ADD_DEFINITIONS (-DUSE_OPTICK=1)
ENDIF (USE_OPTICK)

IF (MSVC)
	# ADD_COMPILE_OPTIONS ("/doc")
	STRING (REGEX REPLACE "/EH[a-z]+" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
	SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHs-c-")
	STRING (REGEX REPLACE "/GR" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
	SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /GR-")

	# SET (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /fsanitize=address")
	SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Ob2 /Oi /Ot")
	OPTION (USE_LINK_TIME_OPTIMIZATION_FOR_RELEASE "Use Link-time Optimization for Release" ON)
	IF (USE_LINK_TIME_OPTIMIZATION_FOR_RELEASE)
		SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /GL")
		SET (CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LTCG /INCREMENTAL:NO /OPT:REF")
		SET (CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /LTCG /INCREMENTAL:NO /OPT:REF")
		SET (CMAKE_MODULE_LINKER_FLAGS_RELEASE "${CMAKE_MODULE_LINKER_FLAGS_RELEASE} /LTCG /INCREMENTAL:NO /OPT:REF")
	ENDIF (USE_LINK_TIME_OPTIMIZATION_FOR_RELEASE)
ELSE (MSVC)
	SET (FLAG_USE_STATIC_THIRDPARTY_LIBRARIES 0)
	IF (IS_X86_64)
		ADD_DEFINITIONS (-msse4.1)
		ADD_DEFINITIONS (-msse3)
	ENDIF (IS_X86_64)

	IF (CMAKE_COMPILER_IS_GNUCXX)
		ADD_DEFINITIONS (-lstdc++)
	ENDIF (CMAKE_COMPILER_IS_GNUCXX)
	
	ADD_DEFINITIONS (-fno-exceptions)
	ADD_DEFINITIONS (-O3)
ENDIF (MSVC)

INCLUDE_DIRECTORIES ("${PROJECT_BINARY_DIR}")
STRING (REPLACE "/" "\\" LOCAL_SOURCE_DIR "${PROJECT_SOURCE_DIR}")

FILE (GLOB_RECURSE PAINTSNOW_SRC
		"${PROJECT_SOURCE_DIR}/Source/Core/*.h"
		"${PROJECT_SOURCE_DIR}/Source/Core/*.cpp"
		"${PROJECT_SOURCE_DIR}/Source/Core/*.c"
		"${PROJECT_SOURCE_DIR}/Source/General/Misc/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Misc/*.cpp"
		"${PROJECT_SOURCE_DIR}/Source/General/Interface/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Interface/*.cpp"
		"${PROJECT_SOURCE_DIR}/Source/General/Template/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Template/*.cpp"
)

# Platform specIFic

IF (MSVC)
	FILE (GLOB_RECURSE PLATFORM_WINDOWS_SRC
		"${PROJECT_SOURCE_DIR}/Source/General/Platform/Windows/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Platform/Windows/*.cpp"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${PLATFORM_WINDOWS_SRC})
ENDIF (MSVC)

# ADD DRIVER OPTIONS

OPTION (ADD_ARCHIVE_DIRENT_BUILTIN "Add Dirent Archive Driver" ON)

IF (ADD_ARCHIVE_DIRENT_BUILTIN)
	SET (FLAG_ADD_ARCHIVE_DIRENT_BUILTIN 1)
	IF (NOT WIN32)
		CHECK_INCLUDE_FILES(dirent.h HAVE_DIRENT_H)
		IF (NOT HAVE_DIRENT_H)
			MESSAGE (FINAL_ERROR "Could not find direct.h FOR Direct Archive Driver")
		ENDIF (NOT HAVE_DIRENT_H)
	ENDIF (NOT WIN32)
ELSE (ADD_ARCHIVE_DIRENT_BUILTIN)
	SET (FLAG_ADD_ARCHIVE_DIRENT_BUILTIN 0)
ENDIF (ADD_ARCHIVE_DIRENT_BUILTIN)
	
SET (FLAG_ADD_ARCHIVE_DIRENT_BUILTIN 1)

IF (ADD_ARCHIVE_DIRENT_BUILTIN)
	FILE (GLOB_RECURSE DIRENT_SRC
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Archive/Dirent/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Archive/Dirent/*.cpp"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${DIRENT_SRC})
ENDIF (ADD_ARCHIVE_DIRENT_BUILTIN)

OPTION (ADD_ARCHIVE_VIRTUAL_BUILTIN "Add Virtual Archive Driver" ON)
IF (ADD_ARCHIVE_VIRTUAL_BUILTIN)
	SET (FLAG_ADD_ARCHIVE_VIRTUAL_BUILTIN 1)
	FILE (GLOB_RECURSE STRBUF_SRC
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Archive/Virtual/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Archive/Virtual/*.cpp"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${STRBUF_SRC})
ELSE (ADD_ARCHIVE_VIRTUAL_BUILTIN)
	SET (FLAG_ADD_ARCHIVE_VIRTUAL_BUILTIN 0)
ENDIF (ADD_ARCHIVE_VIRTUAL_BUILTIN)

OPTION (ADD_RANDOM_LIBNOISE_BUILTIN "Add Libnoise Noise Driver" ON)

IF (ADD_RANDOM_LIBNOISE_BUILTIN)
	SET (FLAG_ADD_RANDOM_LIBNOISE_BUILTIN 1)
	FILE (GLOB_RECURSE BUILTIN_LIBNOISE_SRC
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Random/Libnoise/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Random/Libnoise/*.cpp"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${BUILTIN_LIBNOISE_SRC})
ELSE (ADD_RANDOM_LIBNOISE_BUILTIN)

	SET (FLAG_ADD_RANDOM_LIBNOISE_BUILTIN 0)
ENDIF (ADD_RANDOM_LIBNOISE_BUILTIN)

OPTION (ADD_AUDIO_LAME "Add LAME Decoder Audio Driver" ON)
IF (ADD_AUDIO_LAME)
	SET (FLAG_ADD_AUDIO_LAME 1)
	ADD_SUBDIRECTORY_WITH_FOLDER ("Library" Source/General/Driver/Filter/LAME/Core)

	FILE (GLOB_RECURSE LAME_SRC
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Filter/LAME/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Filter/LAME/*.cpp"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${LAME_SRC})
ELSE (ADD_AUDIO_LAME)
	SET (FLAG_ADD_AUDIO_LAME 0)
ENDIF (ADD_AUDIO_LAME)

OPTION (ADD_AUDIO_OPENAL "Add OpenAL Audio Driver" ON)
IF (ADD_AUDIO_OPENAL)
	SET (FLAG_ADD_AUDIO_OPENAL 1)
	ADD_SUBDIRECTORY_WITH_FOLDER ("Library" Source/General/Driver/Audio/OpenAL/Core)

	FILE (GLOB OPENAL_SRC
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Audio/OpenAL/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Audio/OpenAL/*.cpp"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${OPENAL_SRC})
ELSE (ADD_AUDIO_OPENAL)
	SET (FLAG_ADD_AUDIO_OPENAL 0)
ENDIF (ADD_AUDIO_OPENAL)

OPTION (ADD_DATABASE_SQLITE3_BUILTIN "Add Sqlite3 Database Driver" ON)
IF (ADD_DATABASE_SQLITE3_BUILTIN)
	SET (FLAG_ADD_DATABASE_SQLITE3_BUILTIN 1)
	FILE (GLOB_RECURSE SQLITE3_SRC
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Database/Sqlite/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Database/Sqlite/*.cpp"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Database/Sqlite/*.c"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${SQLITE3_SRC})
ELSE (ADD_DATABASE_SQLITE3_BUILTIN)
	
	SET (FLAG_ADD_DATABASE_SQLITE3_BUILTIN 0)
ENDIF (ADD_DATABASE_SQLITE3_BUILTIN)

IF (WIN32)
	FILE (GLOB_RECURSE WIN32_DUMPER_SRC
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Debugger/MiniDump/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Debugger/MiniDump/*.cpp"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${WIN32_DUMPER_SRC})
ENDIF (WIN32)

OPTION (ADD_DEBUGGER_RENDERDOC_BUILTIN "Add RenderDoc Frame Capture" ON)
IF (ADD_DEBUGGER_RENDERDOC_BUILTIN)
	SET (FLAG_ADD_DEBUGGER_RENDERDOC_BUILTIN 1)
	FILE (GLOB_RECURSE RENDERDOC_SRC
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Debugger/RenderDoc/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Debugger/RenderDoc/*.cpp"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${RENDERDOC_SRC})
ELSE (ADD_DEBUGGER_RENDERDOC_BUILTIN)

	SET (FLAG_ADD_DEBUGGER_RENDERDOC_BUILTIN 0)
ENDIF (ADD_DEBUGGER_RENDERDOC_BUILTIN)

# IF (WIN32)
# 	OPTION (ADD_RENDER_DIRECTX12 "Add DirectX12 Render Driver" OFF)
# 	IF (ADD_RENDER_DIRECTX12)
# 		SET (FLAG_ADD_RENDER_DIRECTX12 1)
# 		FILE (GLOB_RECURSE DIRECTX12_SRC
# 			"${PROJECT_SOURCE_DIR}/Source/General/Driver/Render/12/*.h"
# 			"${PROJECT_SOURCE_DIR}/Source/General/Driver/Render/12/*.cpp"
# 		)
# 	
# 		SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${DIRECTX12_SRC})
# 	ELSE (ADD_RENDER_DIRECTX12)
# 	
# 		SET (FLAG_ADD_RENDER_DIRECTX12 0)
# 	ENDIF (ADD_RENDER_DIRECTX12)
# ELSE (WIN32)
# 	SET (FLAG_ADD_RENDER_DIRECTX12 0)
# ENDIF (WIN32)


OPTION (ADD_FILTER_JSON_BUILTIN "Add Json Archive Driver" ON)
IF (ADD_FILTER_JSON_BUILTIN)
	SET (FLAG_ADD_FILTER_JSON_BUILTIN 1)
	FILE (GLOB_RECURSE JSON_SRC
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Filter/Json/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Filter/Json/*.cpp"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${JSON_SRC})
ELSE (ADD_FILTER_JSON_BUILTIN)

	SET (FLAG_ADD_FILTER_JSON_BUILTIN 0)
ENDIF (ADD_FILTER_JSON_BUILTIN)

OPTION (ADD_FILTER_LZW_BUILTIN "Add LZW Filter Driver" ON)
IF (ADD_FILTER_LZW_BUILTIN)
	SET (FLAG_ADD_FILTER_LZW_BUILTIN 1)
	FILE (GLOB_RECURSE LZW_SRC
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Filter/LZW/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Filter/LZW/*.cpp"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${LZW_SRC})
ELSE (ADD_FILTER_LZW_BUILTIN)
	SET (FLAG_ADD_FILTER_LZW_BUILTIN 0)
ENDIF (ADD_FILTER_LZW_BUILTIN)

IF (IS_X86_64)
	OPTION (ADD_FILTER_BPTC_BUILTIN "Add Intel BPTC Texture Compression Driver (Developing)" ON)
	IF (ADD_FILTER_BPTC_BUILTIN)
		SET (FLAG_ADD_FILTER_BPTC_BUILTIN 1)
		FILE (GLOB_RECURSE BPTC_SRC
			"${PROJECT_SOURCE_DIR}/Source/General/Driver/Filter/BPTC/*.h"
			"${PROJECT_SOURCE_DIR}/Source/General/Driver/Filter/BPTC/*.cpp"
		)

		SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${BPTC_SRC})
	ELSE (ADD_FILTER_BPTC_BUILTIN)
		SET (FLAG_ADD_FILTER_BPTC_BUILTIN 0)
	ENDIF (ADD_FILTER_BPTC_BUILTIN)
ELSE (IS_X86_64)
	SET (FLAG_ADD_FILTER_BPTC_BUILTIN 0)
ENDIF (IS_X86_64)

IF (IS_X86_64)
	OPTION (ADD_FILTER_ASTC_BUILTIN "Add ARM ASTC Texture Compression Driver (Developing)" ON)
	IF (ADD_FILTER_ASTC_BUILTIN)
		SET (FLAG_ADD_FILTER_ASTC_BUILTIN 1)
		FILE (GLOB_RECURSE ASTC_SRC
			"${PROJECT_SOURCE_DIR}/Source/General/Driver/Filter/ASTC/*.h"
			"${PROJECT_SOURCE_DIR}/Source/General/Driver/Filter/ASTC/*.cpp"
		)

		SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${ASTC_SRC})
	ELSE (ADD_FILTER_ASTC_BUILTIN)
		SET (FLAG_ADD_FILTER_ASTC_BUILTIN 0)
	ENDIF (ADD_FILTER_ASTC_BUILTIN)
ELSE (IS_X86_64)
	SET (FLAG_ADD_FILTER_ASTC_BUILTIN 0)
ENDIF (IS_X86_64)

OPTION (ADD_FILTER_POD_BUILTIN "Add POD Archive Driver" ON)
IF (ADD_FILTER_POD_BUILTIN)
	SET (FLAG_ADD_FILTER_POD_BUILTIN 1)
	FILE (GLOB_RECURSE POD_SRC
		"${PROJECT_SOURCE_DIR}/Source/Core/Driver/Filter/Pod/*.h"
		"${PROJECT_SOURCE_DIR}/Source/Core/Driver/Filter/Pod/*.cpp"
		"${PROJECT_SOURCE_DIR}/Source/Core/Driver/Filter/Pod/*.c"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${POD_SRC})
ELSE (ADD_FILTER_POD_BUILTIN)
	SET (FLAG_ADD_FILTER_POD_BUILTIN 0)
ENDIF (ADD_FILTER_POD_BUILTIN)

OPTION (ADD_FILTER_STRBUF_BUILTIN "Add StringBuffer Archive Driver" ON)
IF (ADD_FILTER_STRBUF_BUILTIN)
	SET (FLAG_ADD_FILTER_STRBUF_BUILTIN 1)
	FILE (GLOB_RECURSE STRBUF_SRC
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Filter/StringBuffer/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Filter/StringBuffer/*.cpp"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${STRBUF_SRC})
ELSE (ADD_FILTER_STRBUF_BUILTIN)
	SET (FLAG_ADD_FILTER_STRBUF_BUILTIN 0)
ENDIF (ADD_FILTER_STRBUF_BUILTIN)

OPTION (ADD_FILTER_LZMA_BUILTIN "Add LZMA/7Z Archive/Filter Driver" ON)
IF (ADD_FILTER_LZMA_BUILTIN)
	SET (FLAG_ADD_FILTER_LZMA_BUILTIN 1)
	FILE (GLOB_RECURSE LZMA_SRC
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Filter/LZMA/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Filter/LZMA/*.c"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Filter/LZMA/*.cpp"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Archive/7Z/*.cpp"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Archive/7Z/*.cpp"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${LZMA_SRC})
ELSE (ADD_FILTER_LZMA_BUILTIN)
	
	SET (FLAG_ADD_FILTER_LZMA_BUILTIN 0)
ENDIF (ADD_FILTER_LZMA_BUILTIN)

OPTION (ADD_FONT_FREETYPE "Add Freetype Font Driver" ON)
IF (ADD_FONT_FREETYPE)
	SET (FLAG_ADD_FONT_FREETYPE 1)
	ADD_SUBDIRECTORY_WITH_FOLDER ("Library" Source/General/Driver/Font/Freetype/Core)

	FILE (GLOB FREETYPE_SRC
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Font/Freetype/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Font/Freetype/*.cpp"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${FREETYPE_SRC})
ELSE (ADD_FONT_FREETYPE)
	SET (FLAG_ADD_FONT_FREETYPE 0)
ENDIF (ADD_FONT_FREETYPE)

OPTION (ADD_FRAME_GLFW "Add GLFW Frame/Timer Driver" ON)
IF (ADD_FRAME_GLFW)
	SET (FLAG_ADD_FRAME_GLFW 1)
	ADD_SUBDIRECTORY_WITH_FOLDER ("Library" Source/General/Driver/Frame/GLFW/Core)

	FILE (GLOB GLFW_SRC
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Frame/GLFW/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Frame/GLFW/*.cpp"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Timer/GLFW/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Timer/GLFW/*.cpp"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${GLFW_SRC})
ELSE (ADD_FRAME_GLFW)
	SET (FLAG_ADD_FRAME_GLFW 0)
ENDIF (ADD_FRAME_GLFW)


OPTION (ADD_IMAGE_FREEIMAGE "Add Freeimage Image Driver" ON)
IF (ADD_IMAGE_FREEIMAGE)
	SET (FLAG_ADD_IMAGE_FREEIMAGE 1)
	ADD_SUBDIRECTORY_WITH_FOLDER ("Library" Source/General/Driver/Image/FreeImage/Core)

	FILE (GLOB FREEIMAGE_SRC
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Image/FreeImage/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Image/FreeImage/*.cpp"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${FREEIMAGE_SRC})
ELSE (ADD_IMAGE_FREEIMAGE)
	SET (FLAG_ADD_IMAGE_FREEIMAGE 0)
ENDIF (ADD_IMAGE_FREEIMAGE)

OPTION (ADD_NETWORK_LIBEVENT "Add Libevent Network Driver" ON)
IF (ADD_NETWORK_LIBEVENT)
	SET (FLAG_ADD_NETWORK_LIBEVENT 1)
	ADD_SUBDIRECTORY_WITH_FOLDER ("Library" Source/General/Driver/Network/LibEvent/Core)
	FILE (GLOB LIBEVENT_SRC
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Network/LibEvent/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Network/LibEvent/*.cpp"
	)

	# libevent bug, add these include directories manually.
	INCLUDE_DIRECTORIES("${PROJECT_BINARY_DIR}/Source/General/Driver/Network/LibEvent/Core/include")
	INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/Source/General/Driver/Network/LibEvent/Core/include")
	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${LIBEVENT_SRC})
ELSE (ADD_NETWORK_LIBEVENT)
	SET (FLAG_ADD_NETWORK_LIBEVENT 0)
ENDIF (ADD_NETWORK_LIBEVENT)

OPTION (ADD_NETWORK_KCP "Add KCP Network Driver" ON)
IF (ADD_NETWORK_KCP)
	SET (FLAG_ADD_NETWORK_KCP 1)
	FILE (GLOB_RECURSE KCP_SRC
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Network/KCP/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Network/KCP/*.cpp"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Network/KCP/*.c"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${KCP_SRC})
ELSE (ADD_NETWORK_KCP)
	SET (FLAG_ADD_NETWORK_KCP 0)
ENDIF (ADD_NETWORK_KCP)

OPTION (ADD_RENDER_OPENGL "Add OpenGL Render Driver" ON)
IF (ADD_RENDER_OPENGL)
	SET (FLAG_ADD_RENDER_OPENGL 1)

	FILE (GLOB_RECURSE OPENGL_SRC
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Render/OpenGL/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Render/OpenGL/*.cpp"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Render/OpenGL/*.c"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${OPENGL_SRC})
ELSE (ADD_RENDER_OPENGL)
	
	SET (FLAG_ADD_RENDER_OPENGL 0)
ENDIF (ADD_RENDER_OPENGL)

OPTION (ADD_RENDER_VULKAN "Add Vulkan Render Driver" OFF)
IF (ADD_RENDER_VULKAN)
	FIND_PACKAGE (Vulkan)

	SET (FLAG_ADD_RENDER_VULKAN 1)
	INCLUDE_DIRECTORIES ("${Vulkan_INCLUDE_DIRS}")
	SET (HAVE_VULKAN_H Vulkan_FOUND)
	IF (NOT Vulkan_FOUND)
		MESSAGE (FATAL_ERROR "Could not find Vulkan Render Driver")
	ENDIF (NOT Vulkan_FOUND)

	FILE (GLOB_RECURSE VULKAN_SRC
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Render/Vulkan/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Render/Vulkan/*.cpp"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${VULKAN_SRC})
ELSE (ADD_RENDER_VULKAN)
	
	SET (FLAG_ADD_RENDER_VULKAN 0)
ENDIF (ADD_RENDER_VULKAN)

OPTION (ADD_SCRIPT_LUA_BUILTIN "Add Lua Script Driver" ON)
IF (ADD_SCRIPT_LUA_BUILTIN)
	SET (FLAG_ADD_SCRIPT_LUA_BUILTIN 1)
	FILE (GLOB_RECURSE LUA_SRC
		"${PROJECT_SOURCE_DIR}/Source/Core/Driver/Script/Lua/*.h"
		"${PROJECT_SOURCE_DIR}/Source/Core/Driver/Script/Lua/*.cpp"
		"${PROJECT_SOURCE_DIR}/Source/Core/Driver/Script/Lua/*.c"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${LUA_SRC})
ELSE (ADD_SCRIPT_LUA_BUILTIN)

	SET (FLAG_ADD_SCRIPT_LUA_BUILTIN 0)
ENDIF (ADD_SCRIPT_LUA_BUILTIN)

OPTION (ADD_THREAD_PTHREAD "Add Pthread Thread Driver" ON)
IF (ADD_THREAD_PTHREAD)
	SET (FLAG_ADD_THREAD_PTHREAD 1)
	FILE (GLOB_RECURSE PTHREAD_SRC
		"${PROJECT_SOURCE_DIR}/Source/Core/Driver/Thread/Pthread/*.h"
		"${PROJECT_SOURCE_DIR}/Source/Core/Driver/Thread/Pthread/*.cpp"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${PTHREAD_SRC})
ELSE (ADD_THREAD_PTHREAD)
	SET (FLAG_ADD_THREAD_PTHREAD 0)
ENDIF (ADD_THREAD_PTHREAD)

SET (FLAG_ADD_TIMER_TIMERQUEUE_BUILTIN 0)
SET (FLAG_ADD_TIMER_POSIX_BUILTIN 0)
IF (WIN32)

OPTION (ADD_TIMER_TIMERQUEUE_BUILTIN "Add TimerQueue (Win32) Timer Driver" ON)
IF (ADD_TIMER_TIMERQUEUE_BUILTIN)
	SET (FLAG_ADD_TIMER_TIMERQUEUE_BUILTIN 1)
	FILE (GLOB_RECURSE TIMERQUEUE_SRC
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Timer/WinTimerQueue/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Timer/WinTimerQueue/*.cpp"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${TIMERQUEUE_SRC})
ELSE (ADD_TIMER_TIMERQUEUE_BUILTIN)
	SET (FLAG_ADD_TIMER_TIMERQUEUE_BUILTIN 0)
ENDIF (ADD_TIMER_TIMERQUEUE_BUILTIN)

ELSE (WIN32)

OPTION (ADD_TIMER_POSIX_BUILTIN "Add Posix Timer Driver" ON)
IF (ADD_TIMER_POSIX_BUILTIN)
	SET (FLAG_ADD_TIMER_POSIX_BUILTIN 1)
	CHECK_INCLUDE_FILES(sys/time.h HAVE_SYSTIME_H)
	IF (NOT HAVE_SYSTIME_H)
		MESSAGE (FATAL_ERROR "Could not find sys/time.h FOR Posix Timer Driver")
	ENDIF (NOT HAVE_SYSTIME_H)

	FILE (GLOB_RECURSE POSIX_TIMER_SRC
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Timer/PosixTimer/*.h"
		"${PROJECT_SOURCE_DIR}/Source/General/Driver/Timer/PosixTimer/*.cpp"
	)

	SET (PAINTSNOW_SRC ${PAINTSNOW_SRC} ${POSIX_TIMER_SRC})
ELSE (ADD_TIMER_POSIX_BUILTIN)
	SET (FLAG_ADD_TIMER_POSIX_BUILTIN 0)
ENDIF (ADD_TIMER_POSIX_BUILTIN)

ENDIF (WIN32)

FOREACH (FILE ${PAINTSNOW_SRC}) 
	GET_FILENAME_COMPONENT(PARENT_DIR "${FILE}" PATH)

	# skip src or include and changes /'s to \\'s
	STRING (REGEX REPLACE "(\\./)?(src|include)/?" "" GROUP "${PARENT_DIR}")
	STRING (REPLACE "/" "\\" GROUP "${GROUP}")
	STRING (REPLACE "${LOCAL_SOURCE_DIR}" "" GROUP "${GROUP}")
	SOURCE_GROUP("${GROUP}" FILES "${FILE}")
ENDFOREACH (FILE ${PAINTSNOW_SRC})

ADD_LIBRARY (PaintsNow ${PAINTSNOW_SRC})

# ================================================================ #
# ADD UTILITIES

# ---------------------------------------------------------------- #

FILE (GLOB_RECURSE PURPLETRAIL_SRC
		"${PROJECT_SOURCE_DIR}/Source/Utility/PurpleTrail/*.h"
		"${PROJECT_SOURCE_DIR}/Source/Utility/PurpleTrail/*.cpp"
)

FOREACH (FILE ${PURPLETRAIL_SRC}) 
	GET_FILENAME_COMPONENT(PARENT_DIR "${FILE}" PATH)

	# skip src or include and changes /'s to \\'s
	STRING (REGEX REPLACE "(\\./)?(src|include)/?" "" GROUP "${PARENT_DIR}")
	STRING (REPLACE "/" "\\" GROUP "${GROUP}")
	STRING (REPLACE "${LOCAL_SOURCE_DIR}" "" GROUP "${GROUP}")
	SOURCE_GROUP("${GROUP}" FILES "${FILE}")
ENDFOREACH (FILE ${PURPLETRAIL_SRC})

ADD_LIBRARY (PurpleTrail ${PURPLETRAIL_SRC})
SET_TARGET_PROPERTIES (PurpleTrail PROPERTIES FOLDER Utility)

# ---------------------------------------------------------------- #

FILE (GLOB_RECURSE ICEFLOW_SRC
		"${PROJECT_SOURCE_DIR}/Source/Utility/IceFlow/*.h"
		"${PROJECT_SOURCE_DIR}/Source/Utility/IceFlow/*.cpp"
)

FOREACH (FILE ${ICEFLOW_SRC}) 
	GET_FILENAME_COMPONENT(PARENT_DIR "${FILE}" PATH)

	# skip src or include and changes /'s to \\'s
	STRING (REGEX REPLACE "(\\./)?(src|include)/?" "" GROUP "${PARENT_DIR}")
	STRING (REPLACE "/" "\\" GROUP "${GROUP}")
	STRING (REPLACE "${LOCAL_SOURCE_DIR}" "" GROUP "${GROUP}")
	SOURCE_GROUP("${GROUP}" FILES "${FILE}")
ENDFOREACH (FILE ${ICEFLOW_SRC})

ADD_LIBRARY (IceFlow ${ICEFLOW_SRC})
SET_TARGET_PROPERTIES (IceFlow PROPERTIES FOLDER Utility)

# ---------------------------------------------------------------- #

FILE (GLOB_RECURSE BRIDGESUNSET_SRC
		"${PROJECT_SOURCE_DIR}/Source/Utility/BridgeSunset/*.h"
		"${PROJECT_SOURCE_DIR}/Source/Utility/BridgeSunset/*.cpp"
)

FOREACH (FILE ${BRIDGESUNSET_SRC}) 
	GET_FILENAME_COMPONENT(PARENT_DIR "${FILE}" PATH)

	# skip src or include and changes /'s to \\'s
	STRING (REGEX REPLACE "(\\./)?(src|include)/?" "" GROUP "${PARENT_DIR}")
	STRING (REPLACE "/" "\\" GROUP "${GROUP}")
	STRING (REPLACE "${LOCAL_SOURCE_DIR}" "" GROUP "${GROUP}")
	SOURCE_GROUP("${GROUP}" FILES "${FILE}")
ENDFOREACH (FILE ${BRIDGESUNSET_SRC})

ADD_LIBRARY (BridgeSunset ${BRIDGESUNSET_SRC})
SET_TARGET_PROPERTIES (BridgeSunset PROPERTIES FOLDER Utility)

# ---------------------------------------------------------------- #

FILE (GLOB_RECURSE ECHOLEGEND_SRC
		"${PROJECT_SOURCE_DIR}/Source/Utility/EchoLegend/*.h"
		"${PROJECT_SOURCE_DIR}/Source/Utility/EchoLegend/*.cpp"
)

FOREACH (FILE ${ECHOLEGEND_SRC}) 
	GET_FILENAME_COMPONENT(PARENT_DIR "${FILE}" PATH)

	# skip src or include and changes /'s to \\'s
	STRING (REGEX REPLACE "(\\./)?(src|include)/?" "" GROUP "${PARENT_DIR}")
	STRING (REPLACE "/" "\\" GROUP "${GROUP}")
	STRING (REPLACE "${LOCAL_SOURCE_DIR}" "" GROUP "${GROUP}")
	SOURCE_GROUP("${GROUP}" FILES "${FILE}")
ENDFOREACH (FILE ${ECHOLEGEND_SRC})

ADD_LIBRARY (EchoLegend ${ECHOLEGEND_SRC})
SET_TARGET_PROPERTIES (EchoLegend PROPERTIES FOLDER Utility)

# ---------------------------------------------------------------- #

FILE (GLOB_RECURSE GALAXYWEAVER_SRC
		"${PROJECT_SOURCE_DIR}/Source/Utility/GalaxyWeaver/*.h"
		"${PROJECT_SOURCE_DIR}/Source/Utility/GalaxyWeaver/*.cpp"
)

FOREACH (FILE ${GALAXYWEAVER_SRC}) 
	GET_FILENAME_COMPONENT(PARENT_DIR "${FILE}" PATH)

	# skip src or include and changes /'s to \\'s
	STRING (REGEX REPLACE "(\\./)?(src|include)/?" "" GROUP "${PARENT_DIR}")
	STRING (REPLACE "/" "\\" GROUP "${GROUP}")
	STRING (REPLACE "${LOCAL_SOURCE_DIR}" "" GROUP "${GROUP}")
	SOURCE_GROUP("${GROUP}" FILES "${FILE}")
ENDFOREACH (FILE ${GALAXYWEAVER_SRC})

ADD_LIBRARY (GalaxyWeaver ${GALAXYWEAVER_SRC})
SET_TARGET_PROPERTIES (GalaxyWeaver PROPERTIES FOLDER Utility)

# ---------------------------------------------------------------- #

FILE (GLOB_RECURSE HEARTVIOLINER_SRC
		"${PROJECT_SOURCE_DIR}/Source/Utility/HeartVioliner/*.h"
		"${PROJECT_SOURCE_DIR}/Source/Utility/HeartVioliner/*.cpp"
)

FOREACH (FILE ${HEARTVIOLINER_SRC}) 
	GET_FILENAME_COMPONENT(PARENT_DIR "${FILE}" PATH)

	# skip src or include and changes /'s to \\'s
	STRING (REGEX REPLACE "(\\./)?(src|include)/?" "" GROUP "${PARENT_DIR}")
	STRING (REPLACE "/" "\\" GROUP "${GROUP}")
	STRING (REPLACE "${LOCAL_SOURCE_DIR}" "" GROUP "${GROUP}")
	SOURCE_GROUP("${GROUP}" FILES "${FILE}")
ENDFOREACH (FILE ${HEARTVIOLINER_SRC})

ADD_LIBRARY (HeartVioliner ${HEARTVIOLINER_SRC})
SET_TARGET_PROPERTIES (HeartVioliner PROPERTIES FOLDER Utility)

# ---------------------------------------------------------------- #

FILE (GLOB_RECURSE LEAVESFLUTE_SRC
		"${PROJECT_SOURCE_DIR}/Source/Utility/LeavesFlute/*.h"
		"${PROJECT_SOURCE_DIR}/Source/Utility/LeavesFlute/*.cpp"
)

FOREACH (FILE ${LEAVESFLUTE_SRC}) 
	GET_FILENAME_COMPONENT(PARENT_DIR "${FILE}" PATH)

	# skip src or include and changes /'s to \\'s
	STRING (REGEX REPLACE "(\\./)?(src|include)/?" "" GROUP "${PARENT_DIR}")
	STRING (REPLACE "/" "\\" GROUP "${GROUP}")
	STRING (REPLACE "${LOCAL_SOURCE_DIR}" "" GROUP "${GROUP}")
	SOURCE_GROUP("${GROUP}" FILES "${FILE}")
ENDFOREACH (FILE ${LEAVESFLUTE_SRC})

ADD_LIBRARY (LeavesFlute ${LEAVESFLUTE_SRC})
SET_TARGET_PROPERTIES (LeavesFlute PROPERTIES FOLDER Utility)


# ---------------------------------------------------------------- #

FILE (GLOB_RECURSE MYTHFOREST_SRC
		"${PROJECT_SOURCE_DIR}/Source/Utility/MythForest/*.h"
		"${PROJECT_SOURCE_DIR}/Source/Utility/MythForest/*.cpp"
)

FOREACH (FILE ${MYTHFOREST_SRC}) 
	GET_FILENAME_COMPONENT(PARENT_DIR "${FILE}" PATH)

	# skip src or include and changes /'s to \\'s
	STRING (REGEX REPLACE "(\\./)?(src|include)/?" "" GROUP "${PARENT_DIR}")
	STRING (REPLACE "/" "\\" GROUP "${GROUP}")
	STRING (REPLACE "${LOCAL_SOURCE_DIR}" "" GROUP "${GROUP}")
	SOURCE_GROUP("${GROUP}" FILES "${FILE}")
ENDFOREACH (FILE ${MYTHFOREST_SRC})

ADD_LIBRARY (MythForest ${MYTHFOREST_SRC})
SET_TARGET_PROPERTIES (MythForest PROPERTIES FOLDER Utility)

# ---------------------------------------------------------------- #

FILE (GLOB_RECURSE REMEMBERY_SRC
		"${PROJECT_SOURCE_DIR}/Source/Utility/Remembery/*.h"
		"${PROJECT_SOURCE_DIR}/Source/Utility/Remembery/*.cpp"
)

FOREACH (FILE ${REMEMBERY_SRC}) 
	GET_FILENAME_COMPONENT(PARENT_DIR "${FILE}" PATH)

	# skip src or include and changes /'s to \\'s
	STRING (REGEX REPLACE "(\\./)?(src|include)/?" "" GROUP "${PARENT_DIR}")
	STRING (REPLACE "/" "\\" GROUP "${GROUP}")
	STRING (REPLACE "${LOCAL_SOURCE_DIR}" "" GROUP "${GROUP}")
	SOURCE_GROUP("${GROUP}" FILES "${FILE}")
ENDFOREACH (FILE ${REMEMBERY_SRC})

ADD_LIBRARY (Remembery ${REMEMBERY_SRC})
SET_TARGET_PROPERTIES (Remembery PROPERTIES FOLDER Utility)

# ---------------------------------------------------------------- #

FILE (GLOB_RECURSE SNOWYSTREAM_SRC
		"${PROJECT_SOURCE_DIR}/Source/Utility/SnowyStream/*.h"
		"${PROJECT_SOURCE_DIR}/Source/Utility/SnowyStream/*.cpp"
)

FOREACH (FILE ${SNOWYSTREAM_SRC}) 
	GET_FILENAME_COMPONENT(PARENT_DIR "${FILE}" PATH)

	# skip src or include and changes /'s to \\'s
	STRING (REGEX REPLACE "(\\./)?(src|include)/?" "" GROUP "${PARENT_DIR}")
	STRING (REPLACE "/" "\\" GROUP "${GROUP}")
	STRING (REPLACE "${LOCAL_SOURCE_DIR}" "" GROUP "${GROUP}")
	SOURCE_GROUP("${GROUP}" FILES "${FILE}")
ENDFOREACH (FILE ${SNOWYSTREAM_SRC})

ADD_LIBRARY (SnowyStream ${SNOWYSTREAM_SRC})
SET_TARGET_PROPERTIES (SnowyStream PROPERTIES FOLDER Utility)

# ================================================================ #

FILE (GLOB_RECURSE LEAVESWING_SRC
		"${PROJECT_SOURCE_DIR}/Source/Shell/LeavesWing/*.h"
		"${PROJECT_SOURCE_DIR}/Source/Shell/LeavesWing/*.cpp"
)

FOREACH (FILE ${LEAVESWING_SRC}) 
	GET_FILENAME_COMPONENT(PARENT_DIR "${FILE}" PATH)

	# skip src or include and changes /'s to \\'s
	STRING (REGEX REPLACE "(\\./)?(src|include)/?" "" GROUP "${PARENT_DIR}")
	STRING (REPLACE "/" "\\" GROUP "${GROUP}")
	STRING (REPLACE "${LOCAL_SOURCE_DIR}" "" GROUP "${GROUP}")
	SOURCE_GROUP("${GROUP}" FILES "${FILE}")
ENDFOREACH (FILE ${LEAVESWING_SRC})

ADD_EXECUTABLE (LeavesWing ${LEAVESWING_SRC})
SET_TARGET_PROPERTIES (LeavesWing PROPERTIES FOLDER Shell)

SET (PAINTSNOW_LIBRARIES
	LeavesFlute Remembery MythForest SnowyStream BridgeSunset PurpleTrail IceFlow HeartVioliner EchoLegend GalaxyWeaver PaintsNow
)

IF (ADD_FRAME_GLFW)
	SET (PAINTSNOW_LIBRARIES ${PAINTSNOW_LIBRARIES} glfw)
ENDIF (ADD_FRAME_GLFW)

IF (ADD_AUDIO_OPENAL)
	SET (PAINTSNOW_LIBRARIES ${PAINTSNOW_LIBRARIES} OpenAL)
ENDIF (ADD_AUDIO_OPENAL)

IF (ADD_FONT_FREETYPE)
	SET (PAINTSNOW_LIBRARIES ${PAINTSNOW_LIBRARIES} freetype)
ENDIF (ADD_FONT_FREETYPE)

IF (ADD_IMAGE_FREEIMAGE)
	SET (PAINTSNOW_LIBRARIES ${PAINTSNOW_LIBRARIES} FreeImage)
ENDIF (ADD_IMAGE_FREEIMAGE)

IF (ADD_NETWORK_LIBEVENT)
	SET (PAINTSNOW_LIBRARIES ${PAINTSNOW_LIBRARIES} event event_core)
ENDIF (ADD_NETWORK_LIBEVENT)

IF (ADD_AUDIO_LAME)
	SET (PAINTSNOW_LIBRARIES ${PAINTSNOW_LIBRARIES} mp3lame)
ENDIF (ADD_AUDIO_LAME)

IF (ADD_RENDER_VULKAN)
	SET (PAINTSNOW_LIBRARIES ${PAINTSNOW_LIBRARIES} ${Vulkan_LIBRARIES})
ENDIF (ADD_RENDER_VULKAN)

IF (MSVC)

ELSE (MSVC)
	IF (ADD_RENDER_OPENGL)
		SET (PAINTSNOW_LIBRARIES ${PAINTSNOW_LIBRARIES} GL)
	ENDIF (ADD_RENDER_OPENGL)

	IF (ADD_NETWORK_LIBEVENT)
		SET (PAINTSNOW_LIBRARIES ${PAINTSNOW_LIBRARIES} event_pthreads)
	ENDIF (ADD_NETWORK_LIBEVENT)

	IF (ADD_THREAD_PTHREAD)
		SET (PAINTSNOW_LIBRARIES ${PAINTSNOW_LIBRARIES} pthread)
	ENDIF (ADD_THREAD_PTHREAD)

	SET (PAINTSNOW_LIBRARIES ${PAINTSNOW_LIBRARIES} stdc++ dl rt m)
ENDIF (MSVC)

TARGET_LINK_LIBRARIES (LeavesWing ${PAINTSNOW_LIBRARIES})

FILE (GLOB_RECURSE LOSTDREAM_SRC
		"${PROJECT_SOURCE_DIR}/Source/Shell/LostDream/*.h"
		"${PROJECT_SOURCE_DIR}/Source/Shell/LostDream/*.cpp"
)

ADD_EXECUTABLE (LostDream ${LOSTDREAM_SRC})
SET_TARGET_PROPERTIES (LostDream PROPERTIES FOLDER Shell)

TARGET_LINK_LIBRARIES (LostDream ${PAINTSNOW_LIBRARIES})

FILE (GLOB_RECURSE WINDTOWER_SRC
		"${PROJECT_SOURCE_DIR}/Source/Shell/WindTower/*.h"
		"${PROJECT_SOURCE_DIR}/Source/Shell/WindTower/*.cpp"
)

ADD_EXECUTABLE (WindTower ${WINDTOWER_SRC})
SET_TARGET_PROPERTIES (WindTower PROPERTIES FOLDER Shell)

TARGET_LINK_LIBRARIES (WindTower ${PAINTSNOW_LIBRARIES})

CONFIGURE_FILE (
		"${PROJECT_SOURCE_DIR}/PaintsNowConfig.h.in"
		"${PROJECT_BINARY_DIR}/PaintsNowConfig.h"
)
